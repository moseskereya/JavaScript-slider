{"version":3,"sources":["Components/Recipe.js","Components/Footer.js","Components/Nav.js","Components/Nav2.js","Components/Search.js","Components/Details.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","props","state","recipe","axios","get","then","response","console","log","data","hits","setState","catch","error","className","this","map","item","key","label","top","right","source","src","image","alt","to","Component","Footer","Nav","Nav2","Search","getRecipe","e","preventDefault","RecipeName","target","elements","value","searched","onSubmit","type","name","yield","calories","Details","Single","match","params","ingredients","one","id","text","App","path","exact","component","Detail","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2529b37e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\"\r\nimport Rotate from 'react-reveal/Rotate';\r\nclass Recipe extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            recipe: []\r\n          }\r\n    }\r\n\r\n    componentDidMount () {\r\n        const Ap_Id = \"ed3de50e\";\r\n        const Key = \"ac0727b9ef7767420b1267545d421144\";\r\n        axios.get(`https://api.edamam.com/search?q=icecream&app_id=${Ap_Id}&app_key=${Key}`\r\n        )\r\n        .then(response =>{\r\n            console.log(response.data.hits)\r\n            this.setState({recipe:response.data.hits})\r\n        })\r\n        .catch(error =>{\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"Main\">\r\n             {this.state.recipe.map(item => \r\n             <div className=\"child\" key={item.recipe.label}>\r\n                  <Rotate top right>\r\n                 <div className=\"details\">\r\n                  <h4>{item.recipe.source}</h4>\r\n                  <img src={item.recipe.image} alt=\"img-recipe\"/>\r\n                  <Link to = {`Details/${item.recipe.label}`}>\r\n                     <p className=\"url\">\r\n                        {item.recipe.label} \r\n                     </p>\r\n                  </Link>\r\n                 </div>\r\n                 </Rotate>\r\n             </div>\r\n             )}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Recipe;","import React, { Component } from 'react';\r\nclass Footer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"footer\">\r\n               <p>Moses Codes  |  2020</p>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Zoom from 'react-reveal/Zoom';\r\nclass Nav extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (  \r\n            <Zoom>\r\n            <div className=\"nav\">\r\n                <div className=\"overlay\"></div>\r\n               <h3>Recipe Book</h3>\r\n            </div>\r\n            </Zoom>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Nav;","import React, { Component } from 'react';\r\nimport {Link} from \"react-router-dom\"\r\nclass Nav2 extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div className=\"nav2\">\r\n                <h3>\r\n                 <span> HOME </span> | Recipe Book\r\n                </h3>\r\n                <nav>\r\n                  <ul>\r\n                      <Link to=\"/\">\r\n                        <li>Home</li>\r\n                      </Link>\r\n                      <Link to=\"/search\">\r\n                        <li>Searches</li>\r\n                      </Link>\r\n                  </ul>  \r\n                </nav>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Nav2;","import React, { Component } from 'react';\r\nimport axios from \"axios\"\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            searched:[]\r\n         }\r\n    }\r\n\r\n    getRecipe = (e) =>{\r\n        e.preventDefault()\r\n        const Ap_Id = \"ed3de50e\";\r\n        const Key = \"ac0727b9ef7767420b1267545d421144\";\r\n        const RecipeName = e.target.elements.RecipeName.value;\r\n        axios.get(`https://api.edamam.com/search?q=${RecipeName}&app_id=${Ap_Id}&app_key=${Key}`)\r\n        .then(response =>{\r\n            console.log(response.data.hits)\r\n            this.setState({searched:response.data.hits})\r\n        })\r\n        .catch(error =>{\r\n            console.log(error)\r\n        })\r\n    }\r\n    render() { \r\n        return ( \r\n            <div>\r\n              <div className=\"search\">\r\n                  <h3>Search recipe of your own favorite</h3><br/>\r\n                <form onSubmit={this.getRecipe}>\r\n                   <input type=\"text\" name=\"RecipeName\"/> \r\n                   <button type=\"submit\">Search</button>\r\n                </form>\r\n                </div>\r\n                <div className=\"Main2\">\r\n                {this.state.searched.map(item => \r\n                <div className=\"child\" key={item.recipe.label}>\r\n                 <div className=\"details\">\r\n                  <h4>{item.recipe.label}</h4>\r\n                  <img src={item.recipe.image} alt=\"img-recipe\"/>\r\n                   <p>Food Source :{item.recipe.source}</p>\r\n                   <p>Yield : {item.recipe.yield}</p>\r\n                   <p>calories : {item.recipe.calories}</p>\r\n                 </div>\r\n             </div>\r\n             )}\r\n            </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Search;","import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\n\r\nclass Details extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            Single: []\r\n         }\r\n    }\r\n\r\n\r\n    componentDidMount () {\r\n        const Ap_Id = \"ed3de50e\";\r\n        const Key = \"ac0727b9ef7767420b1267545d421144\";\r\n        axios.get(`https://api.edamam.com/search?q=${this.props.match.params.label}&app_id=${Ap_Id}&app_key=${Key}`\r\n        )\r\n        .then(response =>{\r\n            console.log(response.data.hits)\r\n            this.setState({Single:response.data.hits})\r\n        })\r\n        .catch(error =>{\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n          <div className=\"Main2\">\r\n            {this.state.Single.map(item => \r\n            <div className=\"child\" key={item.recipe.label}>\r\n             <div className=\"details\">\r\n              <h4>{item.recipe.label}</h4>\r\n              <img src={item.recipe.image} alt=\"img-recipe\"/>\r\n              <p>Food Source :{item.recipe.source}</p>\r\n              <p>Yield : {item.recipe.yield}</p>\r\n              <p>calories : {item.recipe.calories}</p>\r\n              <p>Yield : {item.recipe.yield}</p>\r\n             <p>ingredients : {item.recipe.ingredients.map(one => <li key={one.id}>{one.text}</li>)}</p>\r\n          </div>\r\n         </div>\r\n         )}\r\n        </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Details;","import React from 'react';\nimport {BrowserRouter as HarshRoute  , Switch, Route} from \"react-router-dom\"\nimport Recipe from \"./Components/Recipe\"\nimport Footer from \"./Components/Footer\"\nimport Head from \"./Components/Nav\"\nimport Nav2 from \"./Components/Nav2\"\nimport Search from \"./Components/Search\"\nimport Detail from \"./Components/Details\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <HarshRoute>\n     <div className=\"App\">\n     <Nav2/>\n     <Head/>\n     <Switch>\n         <Route path=\"/\" exact component={Recipe}/>\n         <Route path=\"/Search\" component={Search}/>\n         <Route path=\"/Details/:id\"  component={Detail}/>\n      </Switch>\n    <Footer/> \n    </div>\n    </HarshRoute>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}